#!/usr/bin/env python3

import argparse
import json
import os
import random
import subprocess
import boto3


def execute_request(queue_name, msg):
    s3bucket = msg['s3bucket']
    scanopts = msg['scanopts']
    job      = msg['jobs'][0]
    s3output = os.path.join(msg['s3output'], 'ASN', job['asn'],
                            '%s.xml' % (job['cidr'].replace('/', '_')
    s3 = boto3.client('s3')
    try:
        s3.head_object(Bucket=s3bucket, Key=s3output)
        return
    except botocore.exceptions.ClientError as e:
        pass

    output  = 'output.xml'
    if os.path.exists(output):
        os.unlink(output)

    command = ['/usr/bin/nmap']
    command.extend(scanopts)
    command.extend([
        job['cidr'],
        '-oX',
            'output.xml',
    ])
    rc = subprocess.call(command)


    s3.upload_file(
        output,
        s3bucket,
        s3output
    )
    os.unlink(output)

    msg['jobs'].pop(0)
    if msg['jobs']:
        client = boto3.resource('sqs', region_name='us-west-1')
        queue = client.get_queue_by_name(QueueName=queue_name)

        queue.send_messages(Entries=[{
            'Id': '%04d%s' % (random.randint(0, 9999), job['asn']),
            'MessageBody': json.dumps(msg)
        }])

def loop(args):
    client = boto3.resource('sqs', region_name='us-west-1')
    queue = client.get_queue_by_name(QueueName=args.queue)

    while True:
        for message in queue.receive_messages(MaxNumberOfMessages=1):
            body = json.loads(message.body)
            execute_request(args.queue, body)

            queue.delete_messages(Entries=[{
                'Id': message.message_id,
                'ReceiptHandle': message.receipt_handle
            }])

def main(argv=None):
    argp = argparse.ArgumentParser()
    argp.add_argument(
        '-q',
        '--queue',
        default='QueueProcessCIDR'
    )

    args = argp.parse_args()
    loop(args)


if __name__ == '__main__':
    main()
