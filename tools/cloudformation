#!/usr/bin/env python3

import argparse
import base64
import json
import yaml
import boto3

def load_arg_pack(data, pack):
    (key, path) = pack.split('=', maxsplit=1)

    with open(path, 'rb') as fp:
        storage = base64.b64encode(fp.read()).decode('utf-8')

    key_path = key.split('.')
    node = data
    for key in key_path[:-1]:
        if not key in node:
            return
        node = node[key]

    node[key_path[-1]] = storage


def main(argv=None):
    argp = argparse.ArgumentParser()
    argp.add_argument(
        '-n',
        '--name',
        required=True,
    )
    argp.add_argument(
        '-d',
        '--definition',
        type=str,
    )
    argp.add_argument(
        '-C',
        '--create',
        action='store_true'
    )
    argp.add_argument(
        '-D',
        '--delete',
        action='store_true'
    )
    argp.add_argument(
        '--pack',
        action='append'
    )

    args = argp.parse_args(argv)

    # -
    client = boto3.client('cloudformation', region_name='us-west-1')

    if args.delete:
        client.delete_stack(StackName=args.name)
        return 0


    with open(args.definition) as fp:
        data = yaml.load(fp)

    # Load any packs
    for pack in args.pack:
        print(pack)
        load_arg_pack(data, pack)

    # -
    body = json.dumps(data)
    kwargs = {
        'StackName': args.name,
        'TemplateBody': body,
        'Capabilities': ['CAPABILITY_IAM'],
    }

    if args.create:
        client.create_stack(**kwargs)
    else:
        client.update_stack(**kwargs)

if __name__ == '__main__':
    main()
